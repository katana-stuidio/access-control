// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/user/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/katana-stuidio/access-control/pkg/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockUserServiceInterface) Authenticate(username, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", username, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockUserServiceInterfaceMockRecorder) Authenticate(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockUserServiceInterface)(nil).Authenticate), username, password)
}

// Create mocks base method.
func (m *MockUserServiceInterface) Create(ctx context.Context, User *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, User)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceInterfaceMockRecorder) Create(ctx, User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserServiceInterface)(nil).Create), ctx, User)
}

// Delete mocks base method.
func (m *MockUserServiceInterface) Delete(ctx context.Context, ID uuid.UUID) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceInterfaceMockRecorder) Delete(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserServiceInterface)(nil).Delete), ctx, ID)
}

// GetAll mocks base method.
func (m *MockUserServiceInterface) GetAll(ctx context.Context) *model.UserList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*model.UserList)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserServiceInterfaceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserServiceInterface)(nil).GetAll), ctx)
}

// GetByCpf mocks base method.
func (m *MockUserServiceInterface) GetByCpf(ctx context.Context, Cpf string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCpf", ctx, Cpf)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCpf indicates an expected call of GetByCpf.
func (mr *MockUserServiceInterfaceMockRecorder) GetByCpf(ctx, Cpf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCpf", reflect.TypeOf((*MockUserServiceInterface)(nil).GetByCpf), ctx, Cpf)
}

// GetByID mocks base method.
func (m *MockUserServiceInterface) GetByID(ctx context.Context, ID uuid.UUID) *model.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, ID)
	ret0, _ := ret[0].(*model.User)
	return ret0
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserServiceInterfaceMockRecorder) GetByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserServiceInterface)(nil).GetByID), ctx, ID)
}

// GetExistUserName mocks base method.
func (m *MockUserServiceInterface) GetExistUserName(ctx context.Context, userName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistUserName", ctx, userName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistUserName indicates an expected call of GetExistUserName.
func (mr *MockUserServiceInterfaceMockRecorder) GetExistUserName(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistUserName", reflect.TypeOf((*MockUserServiceInterface)(nil).GetExistUserName), ctx, userName)
}

// Update mocks base method.
func (m *MockUserServiceInterface) Update(ctx context.Context, ID uuid.UUID, User *model.User) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ID, User)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceInterfaceMockRecorder) Update(ctx, ID, User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserServiceInterface)(nil).Update), ctx, ID, User)
}
